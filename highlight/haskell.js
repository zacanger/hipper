const
  styles  = require('../lib/styles')
, { cs }  = require('./make-keyword-regex')
, rbrace  = /[\(\)]/g
, sbrace  = /[\[\]]/g
, cbrace  = /[\{\}]/g
, number  = /-?\d+(?:\.\d+)?(?:e-?\d+)?/g
, string  = /('[^']*')|("[^"]*")/g
, comment = /--[^\n]/g
, words   = [
  'Bool'
, 'Bounded'
, 'Char'
, 'Double'
, 'EQ'
, 'Either'
, 'Enum'
, 'Eq'
, 'False'
, 'FilePath'
, 'Float'
, 'Floating'
, 'Fractional'
, 'Functor'
, 'GT'
, 'IO'
, 'IOError'
, 'Int'
, 'Integer'
, 'Integral'
, 'Just'
, 'LT'
, 'Left'
, 'Maybe'
, 'Monad'
, 'Nothing'
, 'Num'
, 'Ord'
, 'Ordering'
, 'Rational'
, 'Read'
, 'ReadS'
, 'Real'
, 'RealFloat'
, 'RealFrac'
, 'Right'
, 'Show'
, 'ShowS'
, 'String'
, 'True'
, 'abs'
, 'acos'
, 'acosh'
, 'all'
, 'and'
, 'any'
, 'appendFile'
, 'asTypeOf'
, 'asin'
, 'asinh'
, 'atan'
, 'atan2'
, 'atanh'
, 'break'
, 'case'
, 'catch'
, 'ceiling'
, 'class'
, 'compare'
, 'concat'
, 'concatMap'
, 'const'
, 'cos'
, 'cosh'
, 'curry'
, 'cycle'
, 'data'
, 'decodeFloat'
, 'default'
, 'deriving'
, 'div'
, 'divMod'
, 'do'
, 'drop'
, 'dropWhile'
, 'either'
, 'elem'
, 'else'
, 'encodeFloat'
, 'enumFrom'
, 'enumFromThen'
, 'enumFromThenTo'
, 'enumFromTo'
, 'error'
, 'even'
, 'exp'
, 'exponent'
, 'fail'
, 'filter'
, 'flip'
, 'floatDigits'
, 'floatRadix'
, 'floatRange'
, 'floor'
, 'fmap'
, 'foldl'
, 'foldl1'
, 'foldr'
, 'foldr1'
, 'foreign'
, 'fromEnum'
, 'fromInteger'
, 'fromIntegral'
, 'fromRational'
, 'fst'
, 'gcd'
, 'getChar'
, 'getContents'
, 'getLine'
, 'head'
, 'id'
, 'if'
, 'import'
, 'in'
, 'infix'
, 'infixl'
, 'infixr'
, 'init'
, 'instance'
, 'interact'
, 'ioError'
, 'isDenormalized'
, 'isIEEE'
, 'isInfinite'
, 'isNaN'
, 'isNegativeZero'
, 'iterate'
, 'last'
, 'lcm'
, 'length'
, 'let'
, 'lex'
, 'lines'
, 'log'
, 'logBase'
, 'lookup'
, 'map'
, 'mapM'
, 'mapM_'
, 'max'
, 'maxBound'
, 'maximum'
, 'maybe'
, 'min'
, 'minBound'
, 'minimum'
, 'mod'
, 'module'
, 'negate'
, 'newtype'
, 'not'
, 'notElem'
, 'null'
, 'odd'
, 'of'
, 'or'
, 'otherwise'
, 'pi'
, 'pred'
, 'print'
, 'product'
, 'properFraction'
, 'putChar'
, 'putStr'
, 'putStrLn'
, 'quot'
, 'quotRem'
, 'read'
, 'readFile'
, 'readIO'
, 'readList'
, 'readLn'
, 'readParen'
, 'reads'
, 'readsPrec'
, 'realToFrac'
, 'recip'
, 'rem'
, 'repeat'
, 'replicate'
, 'return'
, 'reverse'
, 'round'
, 'scaleFloat'
, 'scanl'
, 'scanl1'
, 'scanr'
, 'scanr1'
, 'seq'
, 'sequence'
, 'sequence_'
, 'show'
, 'showChar'
, 'showList'
, 'showParen'
, 'showString'
, 'shows'
, 'showsPrec'
, 'significand'
, 'signum'
, 'sin'
, 'sinh'
, 'snd'
, 'span'
, 'splitAt'
, 'sqrt'
, 'subtract'
, 'succ'
, 'sum'
, 'tail'
, 'take'
, 'takeWhile'
, 'tan'
, 'tanh'
, 'then'
, 'toEnum'
, 'toInteger'
, 'toRational'
, 'truncate'
, 'type'
, 'uncurry'
, 'undefined'
, 'unlines'
, 'until'
, 'unwords'
, 'unzip'
, 'unzip3'
, 'userError'
, 'where'
, 'words'
, 'writeFile'
, 'zip'
, 'zip3'
, 'zipWith'
, 'zipWith3'
]
, keyword = cs(words)

exports.highlight = q => {
  q.wrap(rbrace  , styles.brightCyan)
  q.wrap(sbrace  , styles.brightYellow)
  q.wrap(cbrace  , styles.brightGreen)
  q.wrap(number  , styles.brightMagenta)
  q.wrap(keyword , styles.brightBlue)
  q.wrap(comment , styles.grey)
  q.wrap(string  , styles.red)
}

exports.test = file => /\.(hs|lhs|purs)$/.test(file)
